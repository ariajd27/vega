@page "/planner/import"
@using System.Xml.Linq
@using HtmlAgilityPack
@using System.Text.RegularExpressions
@using System.Text.Json
@using System.Web
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject VegaService VegaService
@inject IJSRuntime JSRuntime

<div class="page_body_field">

    <h1>Import Transcript</h1>

    <p>
        This page allows you to import your unofficial transcript from PeopleSoft to Vega.
        Unfortunately, this does require a small amount of fiddling, but it should be overall much faster than typing each course in.
        Scroll down to follow along with the guide; alternatively, if you've done this before, <a href="planner/import/#import">jump to the file upload</a>.
    </p>

</div>

<CookieDisclaimer />

<div class="page_body_field">

    <h2>Guide</h2>

    <p>
        Uploading your unofficial transcript data shouldn't take more than a few minutes.
        Note that since you're not uploading your real transcript, but instead just part of a PeopleSoft page, your name will not be attached to it.
        In other words, there is no way for Vega to connect your identity to your data.
    </p>

    <p>
        Log into PeopleSoft/Highpoint CX and go to "View Unofficial Transcript" under "Academics" in the sidebar.
    </p>

    <img src="images/import_guide_1.png" />

    <p>
        Once you're on the correct page, click the button that says "Expand All".
    </p>

    <img src="images/import_guide_2.png" />

    <p>
        Then, right-click anywhere on the page and hit "Save Page As..." (the exact label may vary depending on your browser).
        Save the file anywhere; your downloads folder will work just fine.
    </p>

    <img src="images/import_guide_3.png" />

    <p>
        On this page, hit the file upload button.
        Instead of uploading "View Unofficial Transcript.htm", open the folder with the same name and upload "WEBLIB_HCX_RE.htm".
    </p>

    <img src="images/import_guide_4.png" />

    <p>
        Check over the extracted data. If it looks good, hit "Import Data" at the bottom of this page, and you're done!
    </p>

</div>

<div class="page_body_field">

    <h2 id="import">Import</h2>

    <div class="form">

        <p>
            <label>
                Upload file:
                <InputFile OnChange="HandleFileSubmission" />
            </label>
        </p>

        @if (loading)
        {
            <p><emph>loading...</emph></p>
        }
        else if (uploaded)
        {
            <p>Data loaded:</p>
            <table class="table">
                <thead>
                    <tr>
                        <td>Catalog Number</td>
                        <td>Course Title</td>
                        <td>Grade</td>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var course in courses!)
                    {
                        <tr>
                            <td>@course.Listing</td>
                            <td>@HttpUtility.HtmlDecode(course.Topic)</td>
                            <td>@course.Grade</td>
                        </tr>
                    }
                </tbody>
            </table>
            <span>
                Everything look correct?
                <button @onclick="SetBackgroundData">Import Data</button>
            </span>
        }

    </div>

</div>

@code {
    private bool loading = false;
    private bool uploaded = false;

    private IEnumerable<Course>? courses;

    private static readonly Regex listingRegex = new("[A-Z]+ [0-9]{4}", RegexOptions.Compiled);

    private async Task HandleFileSubmission(InputFileChangeEventArgs e)
    {
        if (e.File.Name != "WEBLIB_HCX_RE.htm") return;

        MemoryStream stream = new();
        await e.File.OpenReadStream().CopyToAsync(stream);
        stream.Position = 0;

        if (stream != null)
        {
            loading = true;

            StateHasChanged();

            HtmlDocument document = new();
            await Task.Run(() =>
            {
                document.Load(new StreamReader(stream));
            });

            var courseNodes = document.DocumentNode.Descendants().Where(n => !n.HasChildNodes).Where(n => listingRegex.IsMatch(n.InnerText));
            var courseRows = courseNodes.Select(n => n.ParentNode.ParentNode.ParentNode.ParentNode).Distinct();
            courses = courseRows.Select(n => new Course()
            {
                Topic = n.ChildNodes[0].InnerText,
                Listing = n.ChildNodes[1].InnerText,
                Grade = n.ChildNodes[4].InnerText
            });

            uploaded = true;
            loading = false;

            StateHasChanged();
        }
    }

    private async Task SetBackgroundData()
    {
        var listings = courses!.Select(c => c.Listing.Split(' ')).Select(l => new ListingInput.TinyListing(l[0], int.Parse(l[1])));
        var dbCourses = await Task.WhenAll(listings.Select(async l => await VegaService.GetCourseByListingAsync(l.Subject, l.Number)));
        var courseIds = dbCourses.Where(c => c != null).Select(c => c!.Id).ToArray();

        await JSRuntime.InvokeVoidAsync("cookies.set", Planner.backgroundListingsCookieKey, JsonSerializer.Serialize(listings));
        await JSRuntime.InvokeVoidAsync("cookies.set", Planner.backgroundCoursesCookieKey, JsonSerializer.Serialize(courseIds));
    }

    private class Course
    {
        public required string Topic { get; set; }
        public required string Listing { get; set; }
        public required string Grade { get; set; }
    }
}
