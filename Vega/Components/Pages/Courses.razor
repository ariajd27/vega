@page "/courses/{QueryCampus}/{QuerySubject}"
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Courses</PageTitle>

<div class="page_body_field">

    <h1>Courses</h1>

    <p>Here is a list of all @QuerySubject courses:</p>

</div>

@if (courses == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var course in courses)
    {
        <CollapsibleHeader>
            <HeaderContent>
                @course.FormattedCatalogNumber() @course.Title
            </HeaderContent>
            <ChildContent>
                <p>@course.Description</p>
                <p>typically offered: @course.TypicalTerms</p>
                <p>credits: @course.FormattedNumCredits()</p>
                <p>internal id: @course.InternalId</p>
            </ChildContent>
        </CollapsibleHeader>
    }
}

@code {
    [Parameter]
    public string? QuerySubject { get; set; }
    [Parameter]
    public string? QueryCampus { get; set; }

    private Course[]? courses;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCoursesAsync();
            StateHasChanged();
        }
    }

    private async Task LoadCoursesAsync()
    {
        Course[] unfilteredCourses;
        var result = await ProtectedSessionStore.GetAsync<Course[]>($"courses-{QuerySubject}");
        if (result.Success) unfilteredCourses = result.Value;
        else
        {
            unfilteredCourses = (await Course.GetAllCoursesAsync(QuerySubject));
            await ProtectedSessionStore.SetAsync($"courses-{QuerySubject}", unfilteredCourses);
        }

        courses = unfilteredCourses.Where(x => x.Campus == QueryCampus).ToArray();
    }
}