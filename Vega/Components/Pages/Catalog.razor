@page "/catalog"
@attribute [StreamRendering]
@using System.ComponentModel.DataAnnotations
@using System.ComponentModel
@rendermode InteractiveServer

<PageTitle>Search Catalog</PageTitle>

<div class="page_body_field">

    <h1>Search Catalog</h1>

    <p>
        This page provides more advanced search options for Pitt's catalog than those available at either first-party location. 
        Note however that due to current technical limitations -- which will be resolved in the future -- a subject must be 
        provided to narrow down the search.
    </p>

    <EditForm Model="NewQuery" OnValidSubmit="Submit" FormName="CatalogSearchForm">
        <DataAnnotationsValidator />
        <ul class="form">
            <li>
                <label>
                    Subject:
                    <InputSelect @bind-Value="NewQuery!.Subject">
                        <option value="">
                            select...
                        </option>
                        @if (subjects != null)
                        {
                            @foreach (var subject in subjects)
                            {
                                <option checked="@(NewQuery!.Subject == subject.Name)" value="@subject.Name">
                                    @subject.Name @subject.Description
                                </option>
                            }
                        }
                    </InputSelect>
                </label>
            </li>
            <li>
                <label>
                    Campus:
                    <InputSelect @bind-Value="NewQuery!.Campus">
                        <option checked="@(NewQuery!.Campus == "ANY")" value="ANY">
                            Any
                        </option>
                        @foreach (var campus in Course.campusNames)
                        {
                            <option checked="@(NewQuery!.Campus == campus.Key)" value="@campus.Key">
                                @campus.Value
                            </option>
                        }
                    </InputSelect>
                </label>
            </li>
            <li>
                <label>
                Typical terms offered:
                    <ul class="form">
                        <li>
                            <label>
                                fall
                                <InputCheckbox @bind-Value="NewQuery!.FallTerm" />
                            </label>
                        </li>
                        <li>
                            <label>
                                spring
                                <InputCheckbox @bind-Value="NewQuery!.SpringTerm" />
                            </label>
                        </li>
                        <li>
                            <label>
                                summer
                                <InputCheckbox @bind-Value="NewQuery!.SummerTerm" />
                            </label>
                        </li>
                    </ul>
                </label>
            </li>
            <li>
                <label>
                    Minimum credits:
                    <InputNumber @bind-Value="NewQuery!.MinCredits" />
                </label>
            </li>
            <li>
                <label>
                    Maximum credits:
                    <InputNumber @bind-Value="NewQuery!.MaxCredits" />
                </label>
            </li>
            <li>
                <label>
                    Keywords:
                    <InputText @bind-Value="NewQuery!.Keywords" />
                    <InputSelect @bind-Value="NewQuery!.KeywordMode">
                        @foreach (var keywordMode in Enumerable.Range(0, 2).Select(x => (KeywordMode)x))
                        {
                            <option checked="@(NewQuery!.KeywordMode == keywordMode)" value="@keywordMode">
                                @keywordMode
                            </option>
                        }
                    </InputSelect>
                </label>
            </li>
            <li>
                <button type="submit">Search</button>
            </li>
        </ul>
        <ValidationSummary />
    </EditForm>

</div>

@if (searched)
{
    @if (courses == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (courses.Length > 0)
    {
        @foreach (var course in courses)
        {
            <CollapsibleHeader>
                <HeaderContent>
                    @course.FormattedCatalogNumber() @course.Title
                </HeaderContent>
                <ChildContent>
                    <p>@course.Description</p>
                    @if (FormQuery.Campus == "ANY")
                    {
                        <p>campus: @course.FormattedCampus()</p>
                    }
                    <p>typically offered: @course.TypicalTerms</p>
                    <p>credits: @course.FormattedNumCredits()</p>
                    <p>internal id: @course.InternalId</p>
                    @if (course.Attributes.Any())
                    {
                        <p>attributes:</p>
                        <ul class="list">
                            @foreach (var attr in course.Attributes)
                            {
                                <li>
                                    @attr
                                </li>
                            }
                        </ul>
                    }
                </ChildContent>
            </CollapsibleHeader>
        }
    }
    else
    {
        <p>No courses found matching search criteria.</p>
    }
}

@code {
    [SupplyParameterFromForm]
    private CatalogQuery? NewQuery { get; set; }

    private Subject[]? subjects;

    private bool searched;
    private Course[] courses;
    private CatalogQuery? FormQuery { get; set; }

    protected override void OnInitialized()
    {
        searched = false;
        NewQuery ??= new();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadSubjectsAsync();
            StateHasChanged();
        }
    }

    private async Task LoadSubjectsAsync()
    {
        var result = await ProtectedSessionStore.GetAsync<Subject[]>("subjects");
        if (result.Success)
        {
            subjects = result.Value;
        }
        else
        {
            subjects = await Subject.GetAllSubjectsAsync();
            await ProtectedSessionStore.SetAsync("subjects", subjects);
        }
    }

    private async Task Submit()
    {
        searched = true;
        courses = null;
        StateHasChanged();

        FormQuery = NewQuery;
        await Search();
        StateHasChanged();
    }

    private async Task Search()
    {
        Course[] unfilteredCourses = await Course.GetAllCoursesAsync(FormQuery.Subject);
        courses = unfilteredCourses.Where(x => FormQuery.Campus == "ANY" || x.Campus == FormQuery.Campus)
                                   .Where(x => (x.TypicalTerms & FormQuery.Terms()) > 0)
                                   .Where(x => FormQuery.MinCredits == null || x.MaxNumCredits >= FormQuery.MinCredits)
                                   .Where(x => FormQuery.MaxCredits == null || x.MinNumCredits <= FormQuery.MaxCredits)
                                   .Where(x => FormQuery.Keywords == null || KeywordsSatisfied(x, FormQuery.Keywords, FormQuery.KeywordMode))
                                   .ToArray();
    }

    private bool KeywordsSatisfied(Course course, string rawKeywords, KeywordMode keywordMode)
    {
        var splitKeywords = rawKeywords.Split(' ');
        if (splitKeywords.Length == 0) return true;
        (string keyword, bool satisfied)[] keywords = splitKeywords.Select(x => (x.ToLower(), false)).ToArray();

        for (int i = 0; i < keywords.Length; i++)
        {
            if (course.Title.ToLower().Contains(keywords[i].keyword)) keywords[i].satisfied = true;
            if (course.Description.ToLower().Contains(keywords[i].keyword)) keywords[i].satisfied = true;
        }

        return keywordMode == KeywordMode.Or ? keywords.Any(x => x.satisfied) : keywords.All(x => x.satisfied);
    }

    public class CatalogQuery() : IValidatableObject
    {
        [Required(ErrorMessage = "Subject must be specified.")]
        public string? Subject { get; set; }

        public string? Campus { get; set; } = "ANY";

        public bool FallTerm { get; set; } = true;
        public bool SpringTerm { get; set; } = true;
        public bool SummerTerm { get; set; } = true;
        public Terms Terms() => (Terms)((FallTerm ? 1 : 0) + (SpringTerm ? 2 : 0) + (SummerTerm ? 4 : 0));

        [Range(0, int.MaxValue, ErrorMessage = "Credit minimum must be positive.")]
        public int? MinCredits { get; set; }
        [Range(0, int.MaxValue, ErrorMessage = "Credit maximum must be positive.")]
        public int? MaxCredits { get; set; }

        public string? Keywords { get; set; }
        public KeywordMode KeywordMode { get; set; } = KeywordMode.Or;

        public IEnumerable<ValidationResult> Validate(ValidationContext context)
        {
            if (MaxCredits < MinCredits) yield return new ValidationResult($"Credit maximum cannot be less than credit minimum.");
            if (Terms() == PittAPI.Terms.Unlisted) yield return new ValidationResult($"At least one term must be selected.");
        }
    }

    public enum KeywordMode
    {
        [Description("and")] And,
        [Description("or")] Or
    }
}