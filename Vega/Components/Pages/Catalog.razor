@page "/catalog"
@attribute [StreamRendering]
@using System.ComponentModel.DataAnnotations
@using System.ComponentModel
@rendermode InteractiveServer

<PageTitle>Search Catalog</PageTitle>

<div class="page_body_field">

    <h1>Search Catalog</h1>

    <p>
        This page provides more advanced search options for Pitt's catalog than those available at either first-party location. 
        Note however that due to current technical limitations -- which will be resolved in the future -- a subject must be 
        provided to narrow down the search.
    </p>

    <EditForm Model="NewQuery" OnValidSubmit="Submit" FormName="CatalogSearchForm">
        <DataAnnotationsValidator />
        <ul class="form">
            <li>
                <label>
                    Subject:
                    <InputSelect @bind-Value="NewQuery!.Subject">
                        <option value="">
                            select...
                        </option>
                        @if (subjects != null)
                        {
                            @foreach (var subject in subjects)
                            {
                                <option checked="@(NewQuery!.Subject == subject.Name)" value="@subject.Name">
                                    @subject.Name @subject.Description
                                </option>
                            }
                        }
                    </InputSelect>
                </label>
            </li>
            <li>
                <label>
                    Catalog number:
                    <InputSelect @bind-Value="NewQuery!.CatalogNumberMode">
                        @foreach (var exactRangeToggleMode in Enumerable.Range(0, 2).Select(x => (ExactRangeToggle)x))
                        {
                            <option checked="@(NewQuery!.CatalogNumberMode == exactRangeToggleMode)" value="@exactRangeToggleMode">
                                @exactRangeToggleMode
                            </option>
                        }
                    </InputSelect>
                    <span class="catalog_number">
                        @if (NewQuery!.CatalogNumberMode == ExactRangeToggle.exact)
                        {
                            <InputNumber @bind-Value="NewQuery!.CatalogNumber" />
                        }
                        else
                        {
                            <InputNumber @bind-Value="NewQuery!.CatalogNumberMin" />
                            <span>to</span>
                            <InputNumber @bind-Value="NewQuery!.CatalogNumberMax" />
                        }
                    </span>
                </label>
            </li>
            <li>
                <label>
                    Internal ID:
                    <InputNumber @bind-Value="NewQuery!.InternalId" />
                </label>
            </li>
            <li>
                <label>
                    Campus:
                    <InputSelect @bind-Value="NewQuery!.Campus">
                        <option checked="@(NewQuery!.Campus == "ANY")" value="ANY">
                            Any
                        </option>
                        @foreach (var campus in Course.campusNames)
                        {
                            <option checked="@(NewQuery!.Campus == campus.Key)" value="@campus.Key">
                                @campus.Value
                            </option>
                        }
                    </InputSelect>
                </label>
            </li>
            <li>
                <label>
                    Typical terms offered:
                    <ul class="form">
                        @foreach (var term in Enum.GetValues(typeof(Terms)).Cast<Terms>().Skip(1).SkipLast(1))
                        {
                            <li>
                                <label>
                                    <input type="checkbox" checked="@(NewQuery!.Terms.HasFlag(term))" @onclick="() => ToggleTerm(term)" />
                                    @term
                                </label>
                            </li>
                        }
                    </ul>
                </label>
            </li>
            <li>
                <label>
                    Credit value:
                    <InputSelect @bind-Value="NewQuery!.CreditCountMode">
                        @foreach (var exactRangeToggleMode in Enumerable.Range(0, 2).Select(x => (ExactRangeToggle)x))
                        {
                            <option checked="@(NewQuery!.CatalogNumberMode == exactRangeToggleMode)" value="@exactRangeToggleMode">
                                @exactRangeToggleMode
                            </option>
                        }
                    </InputSelect>
                    <span class="credit_count">
                        @if (NewQuery!.CreditCountMode == ExactRangeToggle.exact)
                        {
                            <InputNumber @bind-Value="NewQuery!.NumCredits" />
                        }
                        else
                        {
                            <InputNumber @bind-Value="NewQuery!.MinCredits" />
                            <span>to</span>
                            <InputNumber @bind-Value="NewQuery!.MaxCredits" />
                        }
                    </span>
                </label>
            </li>
            <li>
                <label>
                    Keywords: contains
                    <InputSelect @bind-Value="NewQuery!.KeywordMode">
                        @foreach (var keywordMode in Enumerable.Range(0, 2).Select(x => (KeywordMode)x))
                        {
                            <option checked="@(NewQuery!.KeywordMode == keywordMode)" value="@keywordMode">
                                @keywordMode
                            </option>
                        }
                    </InputSelect>
                    of
                    <InputText @bind-Value="NewQuery!.Keywords" style="width: 16rem" />
                    <ul class="form">
                        <li>(type one or more keywords separated by commas)</li>
                    </ul>
                </label>
            </li>
            <li>
                <button type="submit">Search</button>
            </li>
        </ul>
        <ValidationSummary />
    </EditForm>

</div>

@if (searched)
{
    @if (courses == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (courses.Length > 0)
    {
        @foreach (var course in courses)
        {
            <CollapsibleHeader>
                <HeaderContent>
                    @course.FormattedCatalogNumber() @course.Title
                </HeaderContent>
                <ChildContent>
                    <p>@course.Description</p>
                    @if (FormQuery.Campus == "ANY")
                    {
                        <p>campus: @course.FormattedCampus()</p>
                    }
                    <p>typically offered: @course.TypicalTerms</p>
                    <p>credits: @course.FormattedNumCredits()</p>
                    <p>internal id: @course.InternalId</p>
                    @if (course.Attributes.Any())
                    {
                        <p>attributes:</p>
                        <ul class="list">
                            @foreach (var attr in course.Attributes)
                            {
                                <li>
                                    @attr
                                </li>
                            }
                        </ul>
                    }
                </ChildContent>
            </CollapsibleHeader>
        }
    }
    else
    {
        <p>No courses found matching search criteria.</p>
    }
}

@code {
    [SupplyParameterFromForm]
    private CatalogQuery? NewQuery { get; set; }

    private Subject[]? subjects;

    private bool searched;
    private Course[]? courses;
    private CatalogQuery? FormQuery { get; set; }

    protected override void OnInitialized()
    {
        searched = false;
        NewQuery ??= new();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadSubjectsAsync();
            StateHasChanged();
        }
    }

    private async Task LoadSubjectsAsync()
    {
        subjects = await Subject.GetAllSubjectsAsync();
    }

    private async Task Submit()
    {
        searched = true;
        courses = null;
        StateHasChanged();

        FormQuery = NewQuery;
        await Search();
        StateHasChanged();
    }

    private async Task Search()
    {
        Course[] unfilteredCourses = await Course.GetAllCoursesAsync(FormQuery.Subject);
        courses = unfilteredCourses.Where(x => FormQuery.InternalId == null || x.InternalId == FormQuery.InternalId)
                                   .Where(x => FormQuery.Campus == "ANY" || x.Campus == FormQuery.Campus)
                                   .Where(x =>
                                   {
                                       if (FormQuery.CatalogNumberMode == ExactRangeToggle.exact)
                                       {
                                           if (FormQuery.CatalogNumber == null) return true;
                                           else return x.CatalogNumber == FormQuery.CatalogNumber;
                                       }
                                       else
                                       {
                                           if (FormQuery.CatalogNumberMin != null)
                                           {
                                               if (x.CatalogNumber < FormQuery.CatalogNumberMin) return false;
                                           }

                                           if (FormQuery.CatalogNumberMax != null)
                                           {
                                               if (x.CatalogNumber > FormQuery.CatalogNumberMax) return false;
                                           }

                                           return true;
                                       }
                                   })
                                   .Where(x => (x.TypicalTerms & FormQuery.Terms) > 0)
                                   .Where(x => FormQuery.MinCredits == null || x.MaxNumCredits >= FormQuery.MinCredits)
                                   .Where(x => FormQuery.MaxCredits == null || x.MinNumCredits <= FormQuery.MaxCredits)
                                   .Where(x =>
                                   {
                                       if (FormQuery.Keywords is null or "") return true;

                                       (string keyword, bool satisfied)[] keywords;

                                       try
                                       {
                                           var splitKeywords = FormQuery.Keywords.Split(',').Where(x => x.Length > 0);
                                           keywords = splitKeywords.Select(x => (x.Trim())).Select(x => (x.ToLower(), false)).ToArray();
                                       }
                                       catch (Exception e)
                                       {
                                           return true;
                                       }

                                       for (int i = 0; i < keywords.Length; i++)
                                       {
                                           if (x.Title.ToLower().Contains(keywords[i].keyword)) keywords[i].satisfied = true;
                                           if (x.Description.ToLower().Contains(keywords[i].keyword)) keywords[i].satisfied = true;
                                       }

                                       if (FormQuery.KeywordMode == KeywordMode.any) return keywords.Any(x => x.satisfied);
                                       else return keywords.All(x => x.satisfied);
                                   })
                                   .ToArray();
    }

    public class CatalogQuery() : IValidatableObject
    {
        [Required(ErrorMessage = "Subject must be specified.")]
        public string? Subject { get; set; }

        public ExactRangeToggle CatalogNumberMode { get; set; } = ExactRangeToggle.range;
        [Range(0, 9999, ErrorMessage = "Catalog number must be a positive integer at most four digits long.")]
        public int? CatalogNumber { get; set; }
        [Range(0, 9999, ErrorMessage = "Catalog number minimum must be a positive integer at most four digits long.")]
        public int? CatalogNumberMin { get; set; }
        [Range(0, 9999, ErrorMessage = "Catalog number maximum must be a positive integer at most four digits long.")]
        public int? CatalogNumberMax { get; set; }

        [Range(0, 999999, ErrorMessage = "Internal ID must be a positive integer at most six digits long.")]
        public int? InternalId { get; set; }

        public string? Campus { get; set; } = "ANY";

        public Terms Terms { get; set; } = Terms.Year;

        public ExactRangeToggle CreditCountMode { get; set; } = ExactRangeToggle.range;
        [Range(0, double.MaxValue, ErrorMessage = "Credit value must be positive.")]
        public decimal? NumCredits { get; set; }
        [Range(0, double.MaxValue, ErrorMessage = "Credit minimum must be positive.")]
        public decimal? MinCredits { get; set; }
        [Range(0, double.MaxValue, ErrorMessage = "Credit maximum must be positive.")]
        public decimal? MaxCredits { get; set; }

        public string? Keywords { get; set; }
        public KeywordMode KeywordMode { get; set; } = KeywordMode.any;

        public IEnumerable<ValidationResult> Validate(ValidationContext context)
        {
            if (CatalogNumberMax < CatalogNumberMin)
                yield return new ValidationResult($"Catalog number maximum cannot be less than catalog number minimum");
            if (MaxCredits < MinCredits) 
                yield return new ValidationResult($"Credit maximum cannot be less than credit minimum.");
            if (Terms == PittAPI.Terms.Unlisted) 
                yield return new ValidationResult($"At least one term must be selected.");
        }
    }

    void ToggleTerm(Terms term)
    {
        NewQuery.Terms ^= term;
    }

    public enum ExactRangeToggle
    {
        exact,
        range
    }

    public enum KeywordMode
    {
        all,
        any
    }
}